// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oanatmaria/ethblkcn-observer/parser (interfaces: Parser)

// Package parser is a generated GoMock package.
package parser

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/oanatmaria/ethblkcn-observer/storage"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// GetCurrentBlock mocks base method.
func (m *MockParser) GetCurrentBlock() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBlock")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCurrentBlock indicates an expected call of GetCurrentBlock.
func (mr *MockParserMockRecorder) GetCurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBlock", reflect.TypeOf((*MockParser)(nil).GetCurrentBlock))
}

// GetTransactions mocks base method.
func (m *MockParser) GetTransactions(arg0 string) []storage.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", arg0)
	ret0, _ := ret[0].([]storage.Transaction)
	return ret0
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockParserMockRecorder) GetTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockParser)(nil).GetTransactions), arg0)
}

// ProcessNewBlocks mocks base method.
func (m *MockParser) ProcessNewBlocks(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessNewBlocks", arg0)
}

// ProcessNewBlocks indicates an expected call of ProcessNewBlocks.
func (mr *MockParserMockRecorder) ProcessNewBlocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNewBlocks", reflect.TypeOf((*MockParser)(nil).ProcessNewBlocks), arg0)
}

// Subscribe mocks base method.
func (m *MockParser) Subscribe(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockParserMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockParser)(nil).Subscribe), arg0)
}
